// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datatype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace plumgrid {

namespace {

const ::google::protobuf::Descriptor* channel_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channel_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* control_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  control_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* control_msg_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* channel_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  channel_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datatype_2eproto() {
  protobuf_AddDesc_datatype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datatype.proto");
  GOOGLE_CHECK(file != NULL);
  channel_info_descriptor_ = file->message_type(0);
  static const int channel_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_info, data_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_info, control_url_),
  };
  channel_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      channel_info_descriptor_,
      channel_info::default_instance_,
      channel_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(channel_info));
  control_msg_descriptor_ = file->message_type(1);
  static const int control_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control_msg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control_msg, channel_),
  };
  control_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      control_msg_descriptor_,
      control_msg::default_instance_,
      control_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(control_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(control_msg));
  control_msg_Type_descriptor_ = control_msg_descriptor_->enum_type(0);
  channel_list_descriptor_ = file->message_type(2);
  static const int channel_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_list, channel_),
  };
  channel_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      channel_list_descriptor_,
      channel_list::default_instance_,
      channel_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(channel_list));
  ack_descriptor_ = file->message_type(3);
  static const int ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack, placeholder_),
  };
  ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ack_descriptor_,
      ack::default_instance_,
      ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ack));
  chat_descriptor_ = file->message_type(4);
  static const int chat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, contents_),
  };
  chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_descriptor_,
      chat::default_instance_,
      chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datatype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    channel_info_descriptor_, &channel_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    control_msg_descriptor_, &control_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    channel_list_descriptor_, &channel_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ack_descriptor_, &ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_descriptor_, &chat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datatype_2eproto() {
  delete channel_info::default_instance_;
  delete channel_info_reflection_;
  delete control_msg::default_instance_;
  delete control_msg_reflection_;
  delete channel_list::default_instance_;
  delete channel_list_reflection_;
  delete ack::default_instance_;
  delete ack_reflection_;
  delete chat::default_instance_;
  delete chat_reflection_;
}

void protobuf_AddDesc_datatype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016datatype.proto\022\010plumgrid\"5\n\014channel_in"
    "fo\022\020\n\010data_url\030\001 \002(\t\022\023\n\013control_url\030\002 \002("
    "\t\"\251\001\n\013control_msg\022(\n\004type\030\001 \002(\0162\032.plumgr"
    "id.control_msg.Type\022\'\n\007channel\030\002 \001(\0132\026.p"
    "lumgrid.channel_info\"G\n\004Type\022\020\n\014GET_CHAN"
    "NELS\020\000\022\025\n\021JOIN_NOTIFICATION\020\001\022\026\n\022LEAVE_N"
    "OTIFICATION\020\002\"7\n\014channel_list\022\'\n\007channel"
    "\030\001 \003(\0132\026.plumgrid.channel_info\"\032\n\003ack\022\023\n"
    "\013placeholder\030\001 \002(\005\"\030\n\004chat\022\020\n\010contents\030\001"
    " \001(\t", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datatype.proto", &protobuf_RegisterTypes);
  channel_info::default_instance_ = new channel_info();
  control_msg::default_instance_ = new control_msg();
  channel_list::default_instance_ = new channel_list();
  ack::default_instance_ = new ack();
  chat::default_instance_ = new chat();
  channel_info::default_instance_->InitAsDefaultInstance();
  control_msg::default_instance_->InitAsDefaultInstance();
  channel_list::default_instance_->InitAsDefaultInstance();
  ack::default_instance_->InitAsDefaultInstance();
  chat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datatype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datatype_2eproto {
  StaticDescriptorInitializer_datatype_2eproto() {
    protobuf_AddDesc_datatype_2eproto();
  }
} static_descriptor_initializer_datatype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int channel_info::kDataUrlFieldNumber;
const int channel_info::kControlUrlFieldNumber;
#endif  // !_MSC_VER

channel_info::channel_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void channel_info::InitAsDefaultInstance() {
}

channel_info::channel_info(const channel_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void channel_info::SharedCtor() {
  _cached_size_ = 0;
  data_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  control_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

channel_info::~channel_info() {
  SharedDtor();
}

void channel_info::SharedDtor() {
  if (data_url_ != &::google::protobuf::internal::kEmptyString) {
    delete data_url_;
  }
  if (control_url_ != &::google::protobuf::internal::kEmptyString) {
    delete control_url_;
  }
  if (this != default_instance_) {
  }
}

void channel_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channel_info_descriptor_;
}

const channel_info& channel_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatype_2eproto();
  return *default_instance_;
}

channel_info* channel_info::default_instance_ = NULL;

channel_info* channel_info::New() const {
  return new channel_info;
}

void channel_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data_url()) {
      if (data_url_ != &::google::protobuf::internal::kEmptyString) {
        data_url_->clear();
      }
    }
    if (has_control_url()) {
      if (control_url_ != &::google::protobuf::internal::kEmptyString) {
        control_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool channel_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_url().data(), this->data_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_control_url;
        break;
      }

      // required string control_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_control_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->control_url().data(), this->control_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void channel_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data_url = 1;
  if (has_data_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_url().data(), this->data_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data_url(), output);
  }

  // required string control_url = 2;
  if (has_control_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->control_url().data(), this->control_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->control_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* channel_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data_url = 1;
  if (has_data_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_url().data(), this->data_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_url(), target);
  }

  // required string control_url = 2;
  if (has_control_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->control_url().data(), this->control_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->control_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int channel_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data_url = 1;
    if (has_data_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_url());
    }

    // required string control_url = 2;
    if (has_control_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->control_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const channel_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const channel_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void channel_info::MergeFrom(const channel_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_url()) {
      set_data_url(from.data_url());
    }
    if (from.has_control_url()) {
      set_control_url(from.control_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void channel_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_info::CopyFrom(const channel_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void channel_info::Swap(channel_info* other) {
  if (other != this) {
    std::swap(data_url_, other->data_url_);
    std::swap(control_url_, other->control_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata channel_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channel_info_descriptor_;
  metadata.reflection = channel_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* control_msg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return control_msg_Type_descriptor_;
}
bool control_msg_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const control_msg_Type control_msg::GET_CHANNELS;
const control_msg_Type control_msg::JOIN_NOTIFICATION;
const control_msg_Type control_msg::LEAVE_NOTIFICATION;
const control_msg_Type control_msg::Type_MIN;
const control_msg_Type control_msg::Type_MAX;
const int control_msg::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int control_msg::kTypeFieldNumber;
const int control_msg::kChannelFieldNumber;
#endif  // !_MSC_VER

control_msg::control_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void control_msg::InitAsDefaultInstance() {
  channel_ = const_cast< ::plumgrid::channel_info*>(&::plumgrid::channel_info::default_instance());
}

control_msg::control_msg(const control_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void control_msg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  channel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

control_msg::~control_msg() {
  SharedDtor();
}

void control_msg::SharedDtor() {
  if (this != default_instance_) {
    delete channel_;
  }
}

void control_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* control_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return control_msg_descriptor_;
}

const control_msg& control_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatype_2eproto();
  return *default_instance_;
}

control_msg* control_msg::default_instance_ = NULL;

control_msg* control_msg::New() const {
  return new control_msg;
}

void control_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_channel()) {
      if (channel_ != NULL) channel_->::plumgrid::channel_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool control_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .plumgrid.control_msg.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::plumgrid::control_msg_Type_IsValid(value)) {
            set_type(static_cast< ::plumgrid::control_msg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // optional .plumgrid.channel_info channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void control_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .plumgrid.control_msg.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .plumgrid.channel_info channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* control_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .plumgrid.control_msg.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .plumgrid.channel_info channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int control_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .plumgrid.control_msg.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .plumgrid.channel_info channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void control_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const control_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const control_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void control_msg::MergeFrom(const control_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channel()) {
      mutable_channel()->::plumgrid::channel_info::MergeFrom(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void control_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void control_msg::CopyFrom(const control_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool control_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_channel()) {
    if (!this->channel().IsInitialized()) return false;
  }
  return true;
}

void control_msg::Swap(control_msg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata control_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = control_msg_descriptor_;
  metadata.reflection = control_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int channel_list::kChannelFieldNumber;
#endif  // !_MSC_VER

channel_list::channel_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void channel_list::InitAsDefaultInstance() {
}

channel_list::channel_list(const channel_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void channel_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

channel_list::~channel_list() {
  SharedDtor();
}

void channel_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void channel_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return channel_list_descriptor_;
}

const channel_list& channel_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatype_2eproto();
  return *default_instance_;
}

channel_list* channel_list::default_instance_ = NULL;

channel_list* channel_list::New() const {
  return new channel_list;
}

void channel_list::Clear() {
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool channel_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .plumgrid.channel_info channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void channel_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .plumgrid.channel_info channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* channel_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .plumgrid.channel_info channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int channel_list::ByteSize() const {
  int total_size = 0;

  // repeated .plumgrid.channel_info channel = 1;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const channel_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const channel_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void channel_list::MergeFrom(const channel_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void channel_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_list::CopyFrom(const channel_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_list::IsInitialized() const {

  for (int i = 0; i < channel_size(); i++) {
    if (!this->channel(i).IsInitialized()) return false;
  }
  return true;
}

void channel_list::Swap(channel_list* other) {
  if (other != this) {
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata channel_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = channel_list_descriptor_;
  metadata.reflection = channel_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ack::kPlaceholderFieldNumber;
#endif  // !_MSC_VER

ack::ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ack::InitAsDefaultInstance() {
}

ack::ack(const ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ack::SharedCtor() {
  _cached_size_ = 0;
  placeholder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ack::~ack() {
  SharedDtor();
}

void ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ack_descriptor_;
}

const ack& ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatype_2eproto();
  return *default_instance_;
}

ack* ack::default_instance_ = NULL;

ack* ack::New() const {
  return new ack;
}

void ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    placeholder_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 placeholder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &placeholder_)));
          set_has_placeholder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 placeholder = 1;
  if (has_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->placeholder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 placeholder = 1;
  if (has_placeholder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->placeholder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 placeholder = 1;
    if (has_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->placeholder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ack::MergeFrom(const ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placeholder()) {
      set_placeholder(from.placeholder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ack::CopyFrom(const ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ack::Swap(ack* other) {
  if (other != this) {
    std::swap(placeholder_, other->placeholder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ack_descriptor_;
  metadata.reflection = ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat::kContentsFieldNumber;
#endif  // !_MSC_VER

chat::chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat::InitAsDefaultInstance() {
}

chat::chat(const chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat::SharedCtor() {
  _cached_size_ = 0;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat::~chat() {
  SharedDtor();
}

void chat::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_descriptor_;
}

const chat& chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datatype_2eproto();
  return *default_instance_;
}

chat* chat::default_instance_ = NULL;

chat* chat::New() const {
  return new chat;
}

void chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contents().data(), this->contents().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string contents = 1;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string contents = 1;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contents = 1;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat::MergeFrom(const chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat::CopyFrom(const chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat::IsInitialized() const {

  return true;
}

void chat::Swap(chat* other) {
  if (other != this) {
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_descriptor_;
  metadata.reflection = chat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace plumgrid

// @@protoc_insertion_point(global_scope)
